2
Generics — это инструмент, позволяющий создавать повторно используемые 
компоненты кода, которые работают с несколькими типами, а не с одним типом.

3
Тип
Это набор типов данных.
Он поддерживает создание нового имени для типа.
У него меньше сравнительно меньших возможностей.
Он не поддерживает использование объекта.
Нельзя использовать несколько объединенных объявлений.
Два типа с одинаковым именем вызывают исключение
У него нет целей реализации.

Интерфейс
Это форма синтаксиса.
Он предоставляет способ определения сущностей.
Он обладает сравнительно большими возможностями.
Он поддерживает использование объекта.
Можно использовать несколько объединенных объявлений.
Два интерфейса с одинаковым именем объединяются.
У него есть цель реализации.

4
TypeScript - это надмножество языка JavaScript, который фокусируется на создании безопасного и предсказуемого кода, который
может быть выполнен любой средой выполнения JavaScript. Его главной особенностью является статическая типизация, которая упрощает работу с
JavaScript более предсказуем

5
children: React.ReactNode

6
Наличие файла tsconfig.json в каталоге указывает на то, что каталог является корневым для проекта TypeScript.
Файл tsconfig.json определяет корневые файлы и параметры компилятора, необходимые для компиляции проекта.

7
extends позволяет добавить опции к другим опциям из указанного файла

8
Когда вы используете тип any, вы берете на себя ответственность за то, чтобы ваш код не использовал типы неправильно,
как если бы вы использовали чистый JavaScript

Тип TypeScript any позволяет хранить значение любого типа. Он указывает компилятору пропустить проверку типов.

Используйте any тип для хранения значения, тип которого на самом деле неизвестен во время компиляции или при переносе проекта JavaScript в проект TypeScript.

9
unknown это множество всех возможных значений. Любое значение может быть присвоено переменной типа unknown. Это означает, что unknown это супертип любого другого типа. по этой причине unknownназывается верхним типом.

never — это примитивный тип, который олицетворяет собой признак для значений, которых никогда не будет. Или, признак для функций, которые никогда не вернут значения, то ли по причине ее зацикленности, например, бесконечный цикл, то ли по причине ее прерывания.

10
Вывод типов - это возможность компилятора(интерпретатора) самостоятельно выводить-указывать тип данных на основе анализа выражения.

11
Защита типа — это метод, при котором Typescript получает информацию о типе переменной после выполнения проверки типа с использованием условного оператора, такого как  if оператор (или switchоператор),  else if или  else.

if (typeof taxValue === "string") {
  console.log(`String value: ${taxValue.toFixed(2)}`);
}

12
Существует два способа использования типов в TypeScript: статический и неявный

Функция статического типа делает предположения о типе явными и позволяет компилятору сообщать об ошибке при использовании разных
типов данных. Статические типы определяются с помощью аннотаций типов

Компилятор TypeScript может выводить типы на основе буквального значения, которое присваивается затем переменной, в которой оно определено,
что означает, что вы можете извлечь выгоду из статических типов без использования аннотаций

13
Да, вы можете использовать объединения типов, добавив к нему новый тип, вы можете изменить его тип

14
TypeScript предоставляет концепцию перегрузки функций. У вас может
быть несколько функций с одинаковым именем, но разными типами параметров
и типом возвращаемого значения. Однако количество параметров должно
быть одинаковым.
function add(a:string, b:string):string;

function add(a:number, b:number): number;

function add(a: any, b:any): any {
    return a + b;
}

add("Hello ", "Steve"); // returns "Hello Steve" 
add(10, 20); // returns 30 

15
Transpilation

16
Если окажется, что я могу выбирать технологии для проекта, то я всегда выберу typescript. Мой опыт работы с typescript составляет более 3 лет. Я завершил несколько проектов в связке react + typescript

17
Быстрый ответ
TS предоставляет специальный синтаксис для удаления null и undefined из типа без необходимости выполнения явной проверки. Указание ! после выражения означает, что данное выражение не может быть нулевым, т.е. иметь значение null или undefined:

18
Кортежи (Tuples) также, как и массивы, представляют набор элементов, для которых уже заранее известен тип. В отличие от массивов кортежи могут хранить значения разных типов. Для определения кортежа применяется синтаксис массива

TypeScript предоставляет нам такой тип данных, называемый кортеж (англ. tuple). Кортеж представляет собой массив, каждый элемент которого имеет свой жестко заданный тип.































